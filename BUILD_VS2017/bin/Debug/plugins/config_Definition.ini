///////////////////////////////////////////////////////////////////////////////
// The definitions of the free camera plugin
///////////////////////////////////////////////////////////////////////////////

OpenGLFreeCamera = ("GLFreeCam/GLFreeCam.dll")
{
  PluginEnabled = (Boolean);
  {
    DefaultValue = False;
    Comment = "If enabled, this plugin allows visualization of what geometry is sent to the graphics card by allowing the camera to 'fly' around the geometry.This is mainly useful for seeing how well frustum culling is implemented and checking that LODs perform correctly. If an application uses vertex programs/shaders, the free camera will not work unless the OpenGL model view state matrix is used in the transformation. (ie  by ftransform() or gl_ModelViewProjection type uniforms.) (This is the common case)";
  }

  EnableKeys = (KeyCombination);
  {
    DefaultValue = (ctrl,shift,c);
    Comment = "Key combination to enable/disable the free camera at runtime. See 'CameraKeys' for the movement keys."; 
  }

  ResetPositionKeys = (KeyCombination);
  {
    DefaultValue = (p);
    Comment = "Key combination to reset the position of the free camera."; 
  }

  ResetOrientationKeys = (KeyCombination);
  {
    DefaultValue = (o);
    Comment = "Key combination to reset the orientation of the free camera."; 
  }

  DisableFaceCullKeys = (KeyCombination);
  {
    DefaultValue = (ctrl,shift,u);
    Comment = "Key combination to disable face culling. (Useful when behind objects)."; 
  }

  EnableWireFrameKeys = (KeyCombination);
  {
    DefaultValue = (ctrl,shift,w);
    Comment = "Key combination to enable wireframe mode."; 
  }

  RenderViewFrustumKeys = (KeyCombination);
  {
    DefaultValue = (ctrl,shift,v);
    Comment = "Key combination to attempt to display the view frustum (in wireframe)."; 
  }

  CameraInputLock = (Boolean);
  {
    DefaultValue = False;
    Comment = "If enabled, it will attempt to lock out the keyboard from the application. This can be useful if the camera control keys map to keys used in the application. This will not work on apps that use low level key handling (ie. via DirectInput).";
  }

  CameraMoveSpeed = (Float);
  {
    DefaultValue = 100.0;
    Comment = "The movement speed of the camera (per second). Use 100.0 for FPS's like Quake3/Doom3";
  }

  CameraRotateSpeed = (Float);
  {
    DefaultValue = 2.0;
    Comment = "The rotation speed of the camera (per second)";
  }

  CameraMoveModifierKey = (String);
  {
    DefaultValue = "shift";
    Comment = "The key to press to modify the movement by 'CameraMoveModifierValue'";
  }

  CameraMoveModifierValue = (Float);
  {
    DefaultValue = 10.0;
    Comment = "The value multipled by 'CameraMoveSpeed' when 'CameraMoveModifierKey' is down.";
  }

  CameraKeys
  {
    Forward = (String);
    {
      DefaultValue = "i";
      Comment = "Move forward key";
    }

    Backward = (String);
    {
      DefaultValue = "k";
      Comment = "Move backward key";
    }

    StrafeLeft = (String);
    {
      DefaultValue = "j";
      Comment = "Strafe left key";
    }

    StrafeRight = (String);
    {
      DefaultValue = "l";
      Comment = "Strafe right key";
    }

    PitchUp = (String);
    {
      DefaultValue = "num8";
      Comment = "Pitch up key";
    }

    PitchDown = (String);
    {
      DefaultValue = "num2";
      Comment = "Pitch down key";
    }

    YawLeft = (String);
    {
      DefaultValue = "num4";
      Comment = "Yaw left key";
    }

    YawRight = (String);
    {
      DefaultValue = "num6";
      Comment = "Yaw right key";
    }

    RollLeft = (String);
    {
      DefaultValue = "num7";
      Comment = "Roll left key";
    }

    RollRight = (String);
    {
      DefaultValue = "num9";
      Comment = "Roll right key";
    }
  }

  AdjustScissor = (Boolean);
  {
    DefaultValue = False;
    Comment = "Adjust the scissor to match the view port when rendering. Useful if scissoring is used to optimize out parts of a scene. (ie. Doom3)";
  }

  IgnoreOrthographic = (Boolean);
  {
    DefaultValue = True;
    Comment = "If enabled, will prevent the free camera from operating on orthographic projected geometry. (usually user interfaces/ render to texture)";
  }

  MainContextOnly = (Boolean);
  {
    DefaultValue = False;
    Comment = "If enabled, will prevent the free camera from operating on any context other than the 'main' context. This can be useful offscreen p-buffers/render surfaces that should not be updated.";
  }

  AdjustGLLighting = (Boolean);
  {
    DefaultValue = True;
    Comment = "If enabled, will adjust the OpenGL lighting (if enabled) to reflect the changing camera position.";
  }

  ForceAdjustGLLighting = (Boolean);
  {
    DefaultValue = False;
    Comment = "If enabled, and 'AdjustGLLighting' is enabled, OpenGL lighting will be updated reguardless of if the OpenGL lighting state is enabled. This can be useful of vertex programs/shaders that access OpenGL's lighting state.";
  }

  RenderViewFrustumColor = (Enum);
  {
    DefaultValue = "white";
    EnumValueTypes = (white, black);
    Comment = "The color of the view frustum. Can only be black or white";
  }

}