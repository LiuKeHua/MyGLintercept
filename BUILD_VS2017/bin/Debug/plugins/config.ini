//////////////////////////////////////////////////////////////
//
//   Free Cam config file
//
//   The free camera allows visualization of what geometry is sent to the
//   graphics card by allowing the camera to "fly" around the geometry.
//   This is mainly useful for seeing how well frustum culling is implemented
//   and checking that LODs perform correctly. 
//
//   If an application uses vertex programs/shaders, the free camera will not
//   work unless the OpenGL model view state matrix is used in the 
//   transformation. (ie  by ftransform() or gl_ModelViewProjection type uniforms.)
//   (This is the common case)
//
//   To use, add the following to the plugins section of gliconfig.ini:
//
//      OpenGLFreeCamera = ("GLFreeCam/GLFreeCam.dll")
//
//   Note: Changing this file will affect all GLIntercept sessions that load
//         this DLL. To only affect a single GLIntercept session, place the
//         relevant options inside this plugins' section in gliConfig.ini.
//
//         (This file is parsed first for the defaults, then the options in 
//          gliConfig.ini can over-ride the defaults)
//
//////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////
//  Enable/Disable keys
//////////////////////////////////////////////////////////////
//
//  EnableKeys - Key combination to enable/disable the free camera. See "CameraKeys"
//               for the movement keys.
//
//  ResetPositionKeys    - Key combination to reset the position of the free camera
//
//  ResetOrientationKeys - Key combination to reset the orientation of the free camera
//
//  DisableFaceCullKeys  - Key combination to disable face culling. (Useful when behind objects)
//
//  EnableWireFrameKeys  - Key combination to enable wireframe mode.
//
//  RenderViewFrustumKeys - Key combination to attempt to display the view frustum (in wireframe).
//
//////////////////////////////////////////////////////////////

EnableKeys            = (ctrl,shift,c);
ResetPositionKeys     = (/*ctrl,shift,*/p);
ResetOrientationKeys  = (/*ctrl,shift,*/o);
DisableFaceCullKeys   = (ctrl,shift,u);
EnableWireFrameKeys   = (ctrl,shift,w);
RenderViewFrustumKeys = (ctrl,shift,v);

//////////////////////////////////////////////////////////////
//  Camera options
//////////////////////////////////////////////////////////////
//
//  CameraInputLock - If enabled, it will attempt to lock out the keyboard
//                    from the application. This can be useful if the camera 
//                    control keys map to keys used in the application. 
//                    This will not work on apps that use low level key 
//                    handleing (ie. via DirectInput).
//
//  CameraMoveSpeed - The movement speed of the camera (per second)  
//
//  CameraRotateSpeed - The rotation speed of the camera (per second)  
//
//  CameraMoveModifierKey - The key to press to modify the movement by "CameraMoveModifierValue"
//
//  CameraMoveModifierValue - The value multipled by "CameraMoveSpeed" when 
//                            "CameraMoveModifierKey" is down.
//
//  CameraKeys  - The keys to move/strafe/rotate the camera. 
//
//////////////////////////////////////////////////////////////

CameraInputLock = False;

CameraMoveSpeed   = 100.0; //Use 100.0 for FPS's like Quake3/Doom3
CameraRotateSpeed = 2.0;

CameraMoveModifierKey   = "shift";
CameraMoveModifierValue = 10.0;

CameraKeys
{
  Forward     = "i";
  Backward    = "k";

  StrafeLeft  = "j";
  StrafeRight = "l";
  
/* Standard WASD controls (usually used in the application)

  Forward     = "w";
  Backward    = "s";

  StrafeLeft  = "a";
  StrafeRight = "d";
*/

  //Assuming numlock on:
  PitchUp     = "num8"; 
  PitchDown   = "num2"; 

  YawLeft     = "num4"; 
  YawRight    = "num6"; 

  RollLeft    = "num7"; 
  RollRight   = "num9"; 

}

//////////////////////////////////////////////////////////////
//  Misc options
//////////////////////////////////////////////////////////////
//
//  AdjustScissor - Adjust the scissor to match the view port when rendering. 
//                  Useful if scissoring is used to optimize out parts of a scene. (ie. Doom3) 
//
//  IgnoreOrthographic - If enabled, will prevent the free camera from operating on
//                       orthographic projected geometry. (usually user interfaces/ render to texture)
//
//  MainContextOnly - If enabled, will prevent the free camera from operating on
//                    any context other than the "main" context. This can be useful offscreen 
//                    p-buffers/render surfaces that should not be updated.
//
//  AdjustGLLighting - If enabled, will adjust the OpenGL lighting (if enabled) to reflect the
//                     changing camera position.
// 
//  ForceAdjustGLLighting - If enabled, and "AdjustGLLighting" is enabled, OpenGL lighting will be
//                          updated reguardless of if the OpenGL lighting state is enabled. This
//                          can be useful of vertex programs/shaders that access OpenGL's lighting
//                          state.
//
//  RenderViewFrustumColor - The color of the view frustum. Can only be "black" or "white"
//
//////////////////////////////////////////////////////////////

AdjustScissor         = False;
IgnoreOrthographic    = True;
MainContextOnly       = False;

AdjustGLLighting      = True;
ForceAdjustGLLighting = False;

RenderViewFrustumColor = "white"; //"black"
